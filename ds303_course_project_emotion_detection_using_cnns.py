# -*- coding: utf-8 -*-
"""DS303 Course Project: Emotion Detection using CNNs

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tfjp7NbGYk38dOt28WXPFQM7P-De6az9
"""

# Commented out IPython magic to ensure Python compatibility.
import torch
import torchvision
import numpy as np
import matplotlib.pyplot as plt
import torch.nn as nn
import torch.nn.functional as F
# from torchvision.datasets import CIFAR10
from torchvision.transforms import ToTensor
from torchvision.utils import make_grid
from torch.utils.data.dataloader import DataLoader
from torch.utils.data import random_split
from torchvision.datasets import ImageFolder
# %matplotlib inline
import pandas as pd
import torchvision.transforms as ttra

import csv
import os
import h5py
import PIL



from google.colab import drive
drive.mount('/content/drive')

# Dataset Loader that is used to load the dataset from the Google Drive

class CustomDataset(torch.utils.data.Dataset):
    def __init__(self, csv_path, images_folder, transform = None):
        self.df = pd.read_csv(csv_path)
        self.images_folder = images_folder
        self.transform = transform
        self.class2index = {"Angry":0, "Disgust":1, "Fear":2 , "Happy":3, "Sad":4, "Surprise":5, "Neutral":6}
# labels: 0=Angry, 1=Disgust, 2=Fear, 3=Happy, 4=Sad, 5=Surprise, 6=Neutral
    def __len__(self):
        return len(self.df)
    def __getitem__(self, index):
        filename = self.df[index, "FILENAME"]
        label = self.class2index[self.df[index, "LABEL"]]
        image = PIL.Image.open(os.path.join(self.images_folder, filename))
        if self.transform is not None:
            image = self.transform(image)
        return image, label

# Creating the Training and Testing Dataset using the above class.
train_dataset = CustomDataset("drive/MyDrive/fer2013/fer2013.csv", "content/drive/fer2013/train"  )
test_dataset = CustomDataset("drive/MyDrive/fer2013/fer2013.csv", "content/drive/fer2013/test"  )

# Data transforms for testing and training data(Gray Scaling & data augmentation)
train_trans = ttra.Compose([ttra.Grayscale(num_output_channels=1),
                         ttra.RandomHorizontalFlip(),
                         ttra.RandomRotation(30),
                         ttra.ToTensor()])

valid_trans = ttra.Compose([ttra.Grayscale(num_output_channels=1), ttra.ToTensor()])

batch_size = 128

train_ds = ImageFolder('/content/drive/MyDrive/fer2013/train', train_trans)
valid_ds = ImageFolder('/content/drive/MyDrive/fer2013/validation', valid_trans)

# Creating a Pytorch DataLoader for the Dataset
train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)
valid_dl = DataLoader(valid_ds, batch_size*2, num_workers=4, pin_memory=True)

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch 
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss
    
    def validation_step(self, batch):
        images, labels = batch 
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels)   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}
        
    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}
    
    def epoch_end(self, epoch, result):
        print("Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}".format(epoch, result['val_loss'], result['val_acc']))

def evaluate(model, val_loader):
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, 
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    history = []
    
    # Set up custom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, steps_per_epoch=len(train_loader))
    for epoch in range(epochs):
        # Training Phase 
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()
            
            # Gradient clipping
            if grad_clip: 
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)
            
            optimizer.step()
            optimizer.zero_grad()
            
            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()
        
        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

# Load the Data and the Model onto the device (GPU here)
def get_default_device():
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')
    
def to_device(data, device):
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device
        
    def __iter__(self):
        for b in self.dl: 
            yield to_device(b, self.device)

    def __len__(self):
      return len(self.dl)

def plot_losses(history):
    losses = [x['val_loss'] for x in history]
    plt.plot(losses, '-x')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.title('Loss vs. No. of epochs');

def plot_accuracies(history):
    accuracies = [x['val_acc'] for x in history]
    plt.plot(accuracies, '-x')
    plt.xlabel('epoch')
    plt.ylabel('accuracy')
    plt.title('Accuracy vs. No. of epochs');

train_loader = DeviceDataLoader(train_loader, device)
val_loader = DeviceDataLoader(val_loader, device)
test_loader = DeviceDataLoader(test_loader, device)

def conv_block(inc, outc, size, pool=False):
    layers = [nn.Conv2d(inc, outc, kernel_size=size, padding=1), nn.BatchNorm2d(outc), nn.ELU(inplace=True)]
    if pool:
      layers.append(nn.MaxPool2d(2))
    return nn.Sequential(*layers)

class ResNetNetwork(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()
        
        self.conv1 = conv_block(in_channels, 32, 1)
        self.conv2 = conv_block(32, 32, 5, pool=True)
        self.maxpool1 = nn.MaxPool2d(2)
        # self.drop1 = nn.Dropout(0.5)
        self.conv3 = conv_block(32, 32, 3)
        self.maxpool2 = nn.MaxPool2d(2)
        self.conv4 = conv_block(32,32,3)
        self.maxpool3 = nn.MaxPool2d(2)
        self.fc1 = nn.Linear(512, 512)
        self.relu1 = F.relu(torch.tensor(self.fc1))
        self.fc2 = nn.Linear(512,512)
        self.relu2 = F.relu(torch.tensor(self.fc2))
        self.fc3 = nn.Linear(512, 9) 
        # self.res2 = nn.Sequential(conv_block(256, 256), conv_block(256, 256))
        ############################
        # self.conv5 = conv_block(256, 512)
        # self.conv6 = conv_block(512, 512, pool=True)
        # self.res3 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))
        # self.drop3 = nn.Dropout(0.5)
        ############################
        # self.classifier = nn.Sequential(nn.MaxPool2d(6), nn.Flatten(), nn.Linear(512, num_classes))
        
    def forward(self, xb):
        out = self.conv1(xb)
        out = self.conv2(out)
        out = self.maxpool1(out)
        out = self.conv3(out)
        out = self.maxpool2(out)
        out = self.conv4(out)
        out = self.maxpool3(out)
        # Maybe add flatten here
        out = self.fc1(out)
        out = self.relu1()
        out = self.fc2(out)
        out = self.relu2()
        out = self.fc3(out)
        return out

model = to_device(ResNetNetwork(1, 9), device)
model

history = [evaluate(model, valid_dl)]
history

epochs = 10
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.Adam

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl, 
#                         grad_clip=grad_clip, weight_decay=weight_decay, opt_func=opt_func)